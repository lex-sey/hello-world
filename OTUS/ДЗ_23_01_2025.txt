#ДЗ 21.012025
# Использование агрегатных функций в clickhouse

CREATE TABLE transactions
(
    `transaction_id` UInt32, -- номер транзакции
    `user_id` UInt32,        -- идентификатор пользователя
    `product_id` UInt32,     -- идентификатор услуги
    `quantity` UInt8,        -- количество
    `price` Float32,         -- цена
    `transaction_date` Date  -- дата транзакции
)
ENGINE = MergeTree
ORDER BY transaction_id

			Query id: bf66d433-7d05-47a7-a6ab-2a2ed2be6b2b

			Ok.

			0 rows in set. Elapsed: 0.017 sec.

INSERT INTO transactions (transaction_id, user_id, product_id, quantity, price, transaction_date)
VALUES
(1, 1, 101, 2, 10.5, '2022-01-01'),
(2, 2, 102, 1, 15.3, '2022-01-02'),
(3, 1, 103, 3, 20.0, '2022-01-03'),
(4, 3, 104, 1, 5.75, '2022-01-04'),
(5, 2, 105, 4, 8.99, '2022-01-05'),
(6, 1, 106, 2, 12.7, '2022-01-06'),
(7, 3, 107, 1, 30.2, '2022-01-07'),
(8, 2, 108, 2, 25.5, '2022-01-08'),
(9, 1, 109, 3, 18.6, '2022-01-09'),
(10, 3, 110, 1, 9.99, '2022-01-10'),
(11, 1, 111, 5, 13.4, '2022-01-11'),
(12, 2, 112, 1, 7.89, '2022-01-12'),
(13, 3, 113, 2, 22.0, '2022-01-13'),
(14, 1, 114, 3, 16.5, '2022-01-14'),
(15, 2, 115, 1, 11.3, '2022-01-15'),
(16, 3, 116, 4, 10.25, '2022-01-16'),
(17, 1, 117, 2, 28.9, '2022-01-17'),
(18, 2, 118, 1, 6.75, '2022-01-18'),
(19, 1, 119, 3, 14.2, '2022-01-19'),
(20, 3, 120, 1, 19.99, '2022-01-20'),
(21, 1, 121, 5, 9.6, '2022-01-21'),
(22, 2, 122, 1, 10.5, '2022-01-22'),
(23, 3, 123, 2, 18.7, '2022-01-23'),
(24, 1, 124, 3, 15.3, '2022-01-24'),
(25, 2, 125, 1, 12.0, '2022-01-25'),
(26, 3, 126, 4, 30.5, '2022-01-26'),
(27, 1, 127, 2, 25.6, '2022-01-27'),
(28, 2, 128, 1, 7.8, '2022-01-28'),
(29, 1, 129, 3, 16.3, '2022-01-29'),
(30, 3, 130, 1, 11.9, '2022-01-30'),
(31, 1, 131, 5, 22.5, '2022-01-31'),
(32, 2, 132, 1, 13.7, '2022-02-01'),
(33, 3, 133, 2, 9.8, '2022-02-02'),
(34, 1, 134, 3, 14.9, '2022-02-03'),
(35, 2, 135, 1, 8.2, '2022-02-04'),
(36, 3, 136, 4, 20.5, '2022-02-05'),
(37, 1, 137, 2, 18.6, '2022-02-06'),
(38, 2, 138, 1, 6.89, '2022-02-07'),
(39, 1, 139, 3, 10.5, '2022-02-08'),
(40, 3, 140, 1, 15.9, '2022-02-09'),
(41, 1, 141, 5, 26.0, '2022-02-10'),
(42, 2, 142, 1, 16.3, '2022-02-11'),
(43, 3, 143, 2, 14.7, '2022-02-12'),
(44, 1, 144, 3, 11.5, '2022-02-13'),
(45, 2, 145, 1, 19.8, '2022-02-14'),
(46, 3, 146, 4, 8.5, '2022-02-15'),
(47, 1, 147, 2, 7.2, '2022-02-16'),
(48, 2, 148, 1, 12.9, '2022-02-17'),
(49, 1, 149, 3, 25.4, '2022-02-18'),
(50, 3, 150, 1, 14.6, '2022-02-19');


# Общий доход по всем операциям
select sum(price*quantity) as total_income from transactions;

			   ┌───────total_income─┐
			1. │ 1808.1199951171875 │
			   └────────────────────┘

# Cредний доход с одной сделки
select avg(price*quantity) as average_income from transactions;

			   ┌────average_income─┐
			1. │ 36.16239990234375 │
			   └───────────────────┘

# Общее количество проданной продукции.
select sum(quantity) as total_income from transactions;
			   ┌─total_income─┐
			1. │          112 │
			   └──────────────┘

# Количество уникальных пользователей, совершивших покупку.
select count(distinct user_id)  as count_users from transactions;
select uniq(user_id) as count_users from transactions;
select uniqExact(user_id) as count_users from transactions;
			   ┌─count_users─┐
			1. │           3 │
			   └─────────────┘

# Преобразование `transaction_date` в строку формата `YYYY:MM:DD`

SELECT
    transaction_date, --поле из таблицы
    formatDateTime(transaction_date, '%Y:%m:%d') AS format_date, -- поле с измененным фарматом даты
    toString(format_date || ' date')  -- поле даты преобразованное в строку
FROM transactions

# Извлечение года,месяца, дня из `transaction_date`.

SELECT
transaction_date,
toYear(transaction_date), --взять год
toMonth(transaction_date), -- взять месяц
toDayOfMonth(transaction_date) -- взять день
FROM transactions

# Округление`price` до ближайшего целого числа.
select price, round(price) as "round price" from transactions;

#Преобразование `transaction_id` в строку.

select transaction_id, toString(transaction_id) as string from transactions;

# Создание функции определенной пользователем

create function sum_price_ch as (a, b) -> a*b;

vim /var/lib/clickhouse/user_scripts/sum_price.py

# Подсчёт стоимости транзакции
select  transaction_id, quantity, price, sum_price_ch(price, quantity) as overall_cost from transactions;
# функция считает примерные значения с точностью примерно до 2 знаков


			   ┌─transaction_id─┬─quantity─┬─price─┬───────overall_cost─┐
			1. │              1 │        2 │  10.5 │                 21 │
			2. │              2 │        1 │  15.3 │ 15.300000190734863 │
			3. │              3 │        3 │    20 │                 60 │
			4. │              4 │        1 │  5.75 │               5.75 │
			5. │              5 │        4 │  8.99 │ 35.959999084472656 │
			   └────────────────┴──────────┴───────┴────────────────────┘

# С округлением 
select  transaction_id, quantity, price, round(sum_price_ch(price, quantity),2) as overall_cost from transactions;

			   ┌─transaction_id─┬─quantity─┬─price─┬─overall_cost─┐
			1. │              1 │        2 │  10.5 │           21 │
			2. │              2 │        1 │  15.3 │         15.3 │
			3. │              3 │        3 │    20 │           60 │
			4. │              4 │        1 │  5.75 │         5.75 │
			5. │              5 │        4 │  8.99 │        35.96 │
			   └────────────────┴──────────┴───────┴──────────────┘


# Не понятно задание
# Используйте созданную UDF для расчета общей цены для каждой транзакции.

# Создание UDF для классификации транзакций на «высокоценные» и «малоценные»  на основе порогового значения 100;
create function is_rich AS (a) -> if (a > 100, 'RICH', 'CHEAP');
select transaction_id, price, quantity, is_rich(sum_price_ch(price, quantity)) as is_rich from transactions limit 5 offset 30;

			   ┌─transaction_id─┬─price─┬─quantity─┬─is_rich─┐
			1. │             31 │  22.5 │        5 │ RICH    │
			2. │             32 │  13.7 │        1 │ CHEAP   │
			3. │             33 │   9.8 │        2 │ CHEAP   │
			4. │             34 │  14.9 │        3 │ CHEAP   │
			5. │             35 │   8.2 │        1 │ CHEAP   │
			   └────────────────┴───────┴──────────┴─────────┘






